// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.22.3
// source: src/proto/coinflip.proto

package coinflip

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CoinflipClient is the client API for Coinflip service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CoinflipClient interface {
	CreateGame(ctx context.Context, in *CreateGameRequest, opts ...grpc.CallOption) (*StandardResponse, error)
	AcceptChallenge(ctx context.Context, in *AcceptChallengeRequest, opts ...grpc.CallOption) (*StandardResponse, error)
	CancelGame(ctx context.Context, in *CancelGameRequest, opts ...grpc.CallOption) (*StandardResponse, error)
}

type coinflipClient struct {
	cc grpc.ClientConnInterface
}

func NewCoinflipClient(cc grpc.ClientConnInterface) CoinflipClient {
	return &coinflipClient{cc}
}

func (c *coinflipClient) CreateGame(ctx context.Context, in *CreateGameRequest, opts ...grpc.CallOption) (*StandardResponse, error) {
	out := new(StandardResponse)
	err := c.cc.Invoke(ctx, "/coinflip.Coinflip/CreateGame", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coinflipClient) AcceptChallenge(ctx context.Context, in *AcceptChallengeRequest, opts ...grpc.CallOption) (*StandardResponse, error) {
	out := new(StandardResponse)
	err := c.cc.Invoke(ctx, "/coinflip.Coinflip/AcceptChallenge", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coinflipClient) CancelGame(ctx context.Context, in *CancelGameRequest, opts ...grpc.CallOption) (*StandardResponse, error) {
	out := new(StandardResponse)
	err := c.cc.Invoke(ctx, "/coinflip.Coinflip/CancelGame", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CoinflipServer is the server API for Coinflip service.
// All implementations must embed UnimplementedCoinflipServer
// for forward compatibility
type CoinflipServer interface {
	CreateGame(context.Context, *CreateGameRequest) (*StandardResponse, error)
	AcceptChallenge(context.Context, *AcceptChallengeRequest) (*StandardResponse, error)
	CancelGame(context.Context, *CancelGameRequest) (*StandardResponse, error)
	mustEmbedUnimplementedCoinflipServer()
}

// UnimplementedCoinflipServer must be embedded to have forward compatible implementations.
type UnimplementedCoinflipServer struct {
}

func (UnimplementedCoinflipServer) CreateGame(context.Context, *CreateGameRequest) (*StandardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGame not implemented")
}
func (UnimplementedCoinflipServer) AcceptChallenge(context.Context, *AcceptChallengeRequest) (*StandardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AcceptChallenge not implemented")
}
func (UnimplementedCoinflipServer) CancelGame(context.Context, *CancelGameRequest) (*StandardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelGame not implemented")
}
func (UnimplementedCoinflipServer) mustEmbedUnimplementedCoinflipServer() {}

// UnsafeCoinflipServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CoinflipServer will
// result in compilation errors.
type UnsafeCoinflipServer interface {
	mustEmbedUnimplementedCoinflipServer()
}

func RegisterCoinflipServer(s grpc.ServiceRegistrar, srv CoinflipServer) {
	s.RegisterService(&Coinflip_ServiceDesc, srv)
}

func _Coinflip_CreateGame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoinflipServer).CreateGame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/coinflip.Coinflip/CreateGame",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoinflipServer).CreateGame(ctx, req.(*CreateGameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Coinflip_AcceptChallenge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AcceptChallengeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoinflipServer).AcceptChallenge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/coinflip.Coinflip/AcceptChallenge",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoinflipServer).AcceptChallenge(ctx, req.(*AcceptChallengeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Coinflip_CancelGame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelGameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoinflipServer).CancelGame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/coinflip.Coinflip/CancelGame",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoinflipServer).CancelGame(ctx, req.(*CancelGameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Coinflip_ServiceDesc is the grpc.ServiceDesc for Coinflip service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Coinflip_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "coinflip.Coinflip",
	HandlerType: (*CoinflipServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateGame",
			Handler:    _Coinflip_CreateGame_Handler,
		},
		{
			MethodName: "AcceptChallenge",
			Handler:    _Coinflip_AcceptChallenge_Handler,
		},
		{
			MethodName: "CancelGame",
			Handler:    _Coinflip_CancelGame_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "src/proto/coinflip.proto",
}
