# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from . import coinflip_pb2 as coinflip__pb2



class CoinflipStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreateGame = channel.unary_unary(
                '/coinflip.Coinflip/CreateGame',
                request_serializer=coinflip__pb2.CreateGameRequest.SerializeToString,
                response_deserializer=coinflip__pb2.StandardResponse.FromString,
                )
        self.AcceptChallenge = channel.unary_unary(
                '/coinflip.Coinflip/AcceptChallenge',
                request_serializer=coinflip__pb2.AcceptChallengeRequest.SerializeToString,
                response_deserializer=coinflip__pb2.StandardResponse.FromString,
                )
        self.CancelGame = channel.unary_unary(
                '/coinflip.Coinflip/CancelGame',
                request_serializer=coinflip__pb2.CancelGameRequest.SerializeToString,
                response_deserializer=coinflip__pb2.StandardResponse.FromString,
                )


class CoinflipServicer(object):
    """Missing associated documentation comment in .proto file."""

    def CreateGame(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AcceptChallenge(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CancelGame(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_CoinflipServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreateGame': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateGame,
                    request_deserializer=coinflip__pb2.CreateGameRequest.FromString,
                    response_serializer=coinflip__pb2.StandardResponse.SerializeToString,
            ),
            'AcceptChallenge': grpc.unary_unary_rpc_method_handler(
                    servicer.AcceptChallenge,
                    request_deserializer=coinflip__pb2.AcceptChallengeRequest.FromString,
                    response_serializer=coinflip__pb2.StandardResponse.SerializeToString,
            ),
            'CancelGame': grpc.unary_unary_rpc_method_handler(
                    servicer.CancelGame,
                    request_deserializer=coinflip__pb2.CancelGameRequest.FromString,
                    response_serializer=coinflip__pb2.StandardResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'coinflip.Coinflip', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Coinflip(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def CreateGame(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/coinflip.Coinflip/CreateGame',
            coinflip__pb2.CreateGameRequest.SerializeToString,
            coinflip__pb2.StandardResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AcceptChallenge(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/coinflip.Coinflip/AcceptChallenge',
            coinflip__pb2.AcceptChallengeRequest.SerializeToString,
            coinflip__pb2.StandardResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CancelGame(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/coinflip.Coinflip/CancelGame',
            coinflip__pb2.CancelGameRequest.SerializeToString,
            coinflip__pb2.StandardResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
